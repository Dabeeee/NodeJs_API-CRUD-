{
  "{\"sourceRoot\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\\\\api\\\\controllers\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\",\"filename\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\\\\api\\\\controllers\\\\UserController.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\",\"plugins\":[],\"presets\":[]}:7.2.2:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api",
      "filename": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers\\UserController.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers\\UserController.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers\\UserController.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers",
        "sourceFileName": "UserController.js"
      }
    },
    "ast": null,
    "code": "const User = require('../models/User');\n\nconst authService = require('../services/auth.service');\n\nconst bcryptService = require('../services/bcrypt.service');\n\nconst uuid = require('uuid/v1');\n\nconst users = express.Router();\n\nconst UserController = () => {\n  const register = async (req, res) => {\n    const {\n      body\n    } = req;\n\n    if (body.password === body.password2) {\n      try {\n        const user = await User.create({\n          id: uuid(),\n          email: body.email,\n          password: body.password,\n          firstname: body.firstname,\n          middlename: body.middlename,\n          surname: body.surname,\n          gender: body.gender,\n          age: body.age,\n          user_type: body.user_type\n        }); // const token = authService().issue({ id: user.id }); \n\n        return res.status(200).json({\n          success: true,\n          message: \"1 record inserted successfully.\",\n          insertId: user.id\n        });\n      } catch (err) {\n        console.log(err);\n        return res.status(500).json({\n          msg: err\n        });\n      }\n    }\n\n    return res.status(400).json({\n      msg: 'Bad Request: Passwords don\\'t match'\n    });\n  };\n\n  const login = async (req, res) => {\n    const {\n      username,\n      password\n    } = req.body;\n    let email = username;\n\n    if (email && password) {\n      try {\n        const user = await User.findOne({\n          where: {\n            email\n          }\n        });\n\n        if (!user) {\n          return res.status(400).json({\n            msg: 'Bad Request: User not found'\n          });\n        }\n\n        if (bcryptService().comparePassword(password, user.password)) {\n          const token = authService().issue({\n            id: user.id\n          });\n          return res.status(200).json({\n            token,\n            user\n          });\n        }\n\n        return res.status(401).json({\n          msg: 'Unauthorized'\n        });\n      } catch (err) {\n        console.log(err);\n        return res.status(500).json({\n          msg: 'Internal server error'\n        });\n      }\n    }\n\n    return res.status(400).json({\n      msg: 'Bad Request: Email or password is wrong'\n    });\n  };\n\n  const validate = (req, res) => {\n    const {\n      token\n    } = req.body;\n    authService().verify(token, err => {\n      if (err) {\n        return res.status(401).json({\n          isvalid: false,\n          err: 'Invalid Token!'\n        });\n      }\n\n      return res.status(200).json({\n        isvalid: true\n      });\n    });\n  };\n\n  const getAll = async (req, res) => {\n    try {\n      const users = await User.findAll();\n      return res.status(200).json({\n        users\n      });\n    } catch (err) {\n      console.log(err);\n      return res.status(500).json({\n        msg: 'Internal server error'\n      });\n    }\n  };\n\n  const registeruser = async (req, res) => {\n    const {\n      body\n    } = req;\n\n    if (body.password === body.password2) {\n      try {\n        const user = await User.create({\n          id: uuid(),\n          email: body.email,\n          password: body.password,\n          firstname: body.firstname,\n          middlename: body.middlename,\n          surname: body.surname,\n          gender: body.gender,\n          age: body.age,\n          user_type: body.user_type\n        }); // const token = authService().issue({ id: user.id }); \n\n        return res.status(200).json({\n          success: true,\n          message: \"1 record inserted successfully.\",\n          insertId: user.id\n        });\n      } catch (err) {\n        console.log(err);\n        return res.status(500).json({\n          msg: err\n        });\n      }\n    }\n\n    return res.status(400).json({\n      msg: 'Bad Request: Passwords don\\'t match'\n    });\n  };\n\n  return {\n    register,\n    registeruser,\n    login,\n    validate,\n    getAll\n  };\n};\n\nmodule.exports = UserController;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "UserController.js"
      ],
      "names": [
        "User",
        "require",
        "authService",
        "bcryptService",
        "uuid",
        "users",
        "express",
        "Router",
        "UserController",
        "register",
        "req",
        "res",
        "body",
        "password",
        "password2",
        "user",
        "create",
        "id",
        "email",
        "firstname",
        "middlename",
        "surname",
        "gender",
        "age",
        "user_type",
        "status",
        "json",
        "success",
        "message",
        "insertId",
        "err",
        "console",
        "log",
        "msg",
        "login",
        "username",
        "findOne",
        "where",
        "comparePassword",
        "token",
        "issue",
        "validate",
        "verify",
        "isvalid",
        "getAll",
        "findAll",
        "registeruser",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,4BAAD,CAA7B;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMI,KAAK,GAACC,OAAO,CAACC,MAAR,EAAZ;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,QAAQ,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,UAAM;AAAEC,MAAAA;AAAF,QAAWF,GAAjB;;AACA,QAAIE,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,SAA3B,EAAsC;AAEpC,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMf,IAAI,CAACgB,MAAL,CAAY;AAC7BC,UAAAA,EAAE,EAAEb,IAAI,EADqB;AAE7Bc,UAAAA,KAAK,EAAEN,IAAI,CAACM,KAFiB;AAG7BL,UAAAA,QAAQ,EAACD,IAAI,CAACC,QAHe;AAI7BM,UAAAA,SAAS,EAACP,IAAI,CAACO,SAJc;AAK7BC,UAAAA,UAAU,EAACR,IAAI,CAACQ,UALa;AAM7BC,UAAAA,OAAO,EAACT,IAAI,CAACS,OANgB;AAO7BC,UAAAA,MAAM,EAACV,IAAI,CAACU,MAPiB;AAQ7BC,UAAAA,GAAG,EAACX,IAAI,CAACW,GARoB;AAS7BC,UAAAA,SAAS,EAACZ,IAAI,CAACY;AATc,SAAZ,CAAnB,CADE,CAcF;;AACA,eAAOb,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,OAAO,EAAE,IADiB;AAE1BC,UAAAA,OAAO,EAAE,iCAFiB;AAG1BC,UAAAA,QAAQ,EAAEd,IAAI,CAACE;AAHW,SAArB,CAAP;AAOD,OAtBD,CAsBE,OAAOa,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,UAAAA,GAAG,EAAEH;AAAP,SAArB,CAAP;AACD;AACF;;AAED,WAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD,GAjCD;;AAqCA,QAAMC,KAAK,GAAG,OAAOxB,GAAP,EAAYC,GAAZ,KAAoB;AAChC,UAAM;AAAEwB,MAAAA,QAAF;AAAYtB,MAAAA;AAAZ,QAAyBH,GAAG,CAACE,IAAnC;AACA,QAAIM,KAAK,GAAGiB,QAAZ;;AACA,QAAIjB,KAAK,IAAIL,QAAb,EAAuB;AACrB,UAAI;AACF,cAAME,IAAI,GAAG,MAAMf,IAAI,CACtBoC,OADkB,CACV;AACPC,UAAAA,KAAK,EAAE;AACLnB,YAAAA;AADK;AADA,SADU,CAAnB;;AAOA,YAAI,CAACH,IAAL,EAAW;AACT,iBAAOJ,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AACD;;AAED,YAAI9B,aAAa,GAAGmC,eAAhB,CAAgCzB,QAAhC,EAA0CE,IAAI,CAACF,QAA/C,CAAJ,EAA8D;AAC5D,gBAAM0B,KAAK,GAAGrC,WAAW,GAAGsC,KAAd,CAAoB;AAAEvB,YAAAA,EAAE,EAAEF,IAAI,CAACE;AAAX,WAApB,CAAd;AAEA,iBAAON,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,YAAAA,KAAF;AAASxB,YAAAA;AAAT,WAArB,CAAP;AACD;;AAED,eAAOJ,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAnBD,CAmBE,OAAOH,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD;AACF;;AAED,WAAOtB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD,GA9BD;;AAgCA,QAAMQ,QAAQ,GAAG,CAAC/B,GAAD,EAAMC,GAAN,KAAc;AAC7B,UAAM;AAAE4B,MAAAA;AAAF,QAAY7B,GAAG,CAACE,IAAtB;AAEAV,IAAAA,WAAW,GAAGwC,MAAd,CAAqBH,KAArB,EAA6BT,GAAD,IAAS;AACnC,UAAIA,GAAJ,EAAS;AACP,eAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEiB,UAAAA,OAAO,EAAE,KAAX;AAAkBb,UAAAA,GAAG,EAAE;AAAvB,SAArB,CAAP;AACD;;AAED,aAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEiB,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD,KAND;AAOD,GAVD;;AAYA,QAAMC,MAAM,GAAG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAI;AACF,YAAMN,KAAK,GAAG,MAAML,IAAI,CAAC6C,OAAL,EAApB;AAEA,aAAOlC,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAErB,QAAAA;AAAF,OAArB,CAAP;AACD,KAJD,CAIE,OAAOyB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,QAAAA,GAAG,EAAE;AAAP,OAArB,CAAP;AACD;AACF,GATD;;AAUA,QAAMa,YAAY,GAAG,OAAOpC,GAAP,EAAYC,GAAZ,KAAoB;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAWF,GAAjB;;AACA,QAAIE,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,SAA3B,EAAsC;AAEpC,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMf,IAAI,CAACgB,MAAL,CAAY;AAC7BC,UAAAA,EAAE,EAAEb,IAAI,EADqB;AAE7Bc,UAAAA,KAAK,EAAEN,IAAI,CAACM,KAFiB;AAG7BL,UAAAA,QAAQ,EAACD,IAAI,CAACC,QAHe;AAI7BM,UAAAA,SAAS,EAACP,IAAI,CAACO,SAJc;AAK7BC,UAAAA,UAAU,EAACR,IAAI,CAACQ,UALa;AAM7BC,UAAAA,OAAO,EAACT,IAAI,CAACS,OANgB;AAO7BC,UAAAA,MAAM,EAACV,IAAI,CAACU,MAPiB;AAQ7BC,UAAAA,GAAG,EAACX,IAAI,CAACW,GARoB;AAS7BC,UAAAA,SAAS,EAACZ,IAAI,CAACY;AATc,SAAZ,CAAnB,CADE,CAcF;;AACA,eAAOb,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,OAAO,EAAE,IADiB;AAE1BC,UAAAA,OAAO,EAAE,iCAFiB;AAG1BC,UAAAA,QAAQ,EAAEd,IAAI,CAACE;AAHW,SAArB,CAAP;AAOD,OAtBD,CAsBE,OAAOa,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,UAAAA,GAAG,EAAEH;AAAP,SAArB,CAAP;AACD;AACF;;AAED,WAAOnB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEO,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD,GAjCD;;AA0CF,SAAO;AACLxB,IAAAA,QADK;AAELqC,IAAAA,YAFK;AAGLZ,IAAAA,KAHK;AAILO,IAAAA,QAJK;AAKLG,IAAAA;AALK,GAAP;AAOC,CA7ID;;AA+IAG,MAAM,CAACC,OAAP,GAAiBxC,cAAjB",
      "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\controllers",
      "sourcesContent": [
        "const User = require('../models/User');\r\nconst authService = require('../services/auth.service');\r\nconst bcryptService = require('../services/bcrypt.service');\r\nconst uuid = require('uuid/v1');\r\nconst users=express.Router()\r\n\r\nconst UserController = () => {\r\n  const register = async (req, res) => {\r\n    const { body } = req; \r\n    if (body.password === body.password2) { \r\n\r\n      try {\r\n        const user = await User.create({\r\n          id: uuid(),\r\n          email: body.email,\r\n          password:body.password,\r\n          firstname:body.firstname,\r\n          middlename:body.middlename,\r\n          surname:body.surname,\r\n          gender:body.gender,\r\n          age:body.age,\r\n          user_type:body.user_type\r\n\r\n\r\n        });\r\n        // const token = authService().issue({ id: user.id }); \r\n        return res.status(200).json({ \r\n          success: true,\r\n          message: \"1 record inserted successfully.\",\r\n          insertId: user.id\r\n          \r\n        });\r\n\r\n      } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ msg: err });\r\n      }\r\n    }\r\n\r\n    return res.status(400).json({ msg: 'Bad Request: Passwords don\\'t match' });\r\n  };\r\n\r\n\r\n\r\n  const login = async (req, res) => {\r\n    const { username, password } = req.body;\r\n    let email = username;\r\n    if (email && password) {\r\n      try {\r\n        const user = await User\r\n        .findOne({\r\n          where: {\r\n            email,\r\n          },\r\n        });\r\n\r\n        if (!user) {\r\n          return res.status(400).json({ msg: 'Bad Request: User not found' });\r\n        }\r\n\r\n        if (bcryptService().comparePassword(password, user.password)) {\r\n          const token = authService().issue({ id: user.id });\r\n\r\n          return res.status(200).json({ token, user });\r\n        }\r\n\r\n        return res.status(401).json({ msg: 'Unauthorized' });\r\n      } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ msg: 'Internal server error' });\r\n      }\r\n    }\r\n\r\n    return res.status(400).json({ msg: 'Bad Request: Email or password is wrong' });\r\n  };\r\n\r\n  const validate = (req, res) => {\r\n    const { token } = req.body;\r\n\r\n    authService().verify(token, (err) => {\r\n      if (err) {\r\n        return res.status(401).json({ isvalid: false, err: 'Invalid Token!' });\r\n      }\r\n\r\n      return res.status(200).json({ isvalid: true });\r\n    });\r\n  };\r\n\r\n  const getAll = async (req, res) => {\r\n    try {\r\n      const users = await User.findAll();\r\n\r\n      return res.status(200).json({ users });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return res.status(500).json({ msg: 'Internal server error' });\r\n    }\r\n  };\r\n  const registeruser = async (req, res) => {\r\n    const { body } = req; \r\n    if (body.password === body.password2) { \r\n\r\n      try {\r\n        const user = await User.create({\r\n          id: uuid(),\r\n          email: body.email,\r\n          password:body.password,\r\n          firstname:body.firstname,\r\n          middlename:body.middlename,\r\n          surname:body.surname,\r\n          gender:body.gender,\r\n          age:body.age,\r\n          user_type:body.user_type\r\n\r\n\r\n        });\r\n        // const token = authService().issue({ id: user.id }); \r\n        return res.status(200).json({ \r\n          success: true,\r\n          message: \"1 record inserted successfully.\",\r\n          insertId: user.id\r\n          \r\n        });\r\n\r\n      } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ msg: err });\r\n      }\r\n    }\r\n\r\n    return res.status(400).json({ msg: 'Bad Request: Passwords don\\'t match' });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn {\r\n  register,\r\n  registeruser,\r\n  login,\r\n  validate,\r\n  getAll,\r\n};\r\n};\r\n\r\nmodule.exports = UserController;\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1549422774175
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\\\\api\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\",\"filename\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\\\\api\\\\models\\\\User.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Russel Dave Bayanado\\\\Desktop\\\\API\\\\timekeeping-api\",\"plugins\":[],\"presets\":[]}:7.2.2:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api",
      "filename": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models\\User.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models\\User.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models\\User.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models",
        "sourceFileName": "User.js"
      }
    },
    "ast": null,
    "code": "const Sequelize = require('sequelize');\n\nconst bcryptService = require('../services/bcrypt.service');\n\nconst sequelize = require('../../config/database');\n\nconst hooks = {\n  beforeCreate(user) {\n    user.password = bcryptService().password(user); // eslint-disable-line no-param-reassign\n  }\n\n};\nconst tableName = 'users';\nconst User = sequelize.define('User', {\n  email: {\n    type: Sequelize.STRING,\n    unique: true\n  },\n  password: {\n    type: Sequelize.STRING\n  },\n  firstname: {\n    type: Sequelize.STRING\n  },\n  middlename: {\n    type: Sequelize.STRING\n  },\n  lastname: {\n    type: Sequelize.STRING\n  },\n  age: {\n    type: Sequelize.INT\n  },\n  gender: {\n    type: Sequelize.STRING\n  },\n  user_type: {\n    type: Sequelize.STRING\n  }\n}, {\n  hooks,\n  tableName\n}); // eslint-disable-next-line\n\nUser.prototype.toJSON = function () {\n  const values = Object.assign({}, this.get());\n  delete values.password;\n  return values;\n};\n\nmodule.exports = User;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXIuanMiXSwibmFtZXMiOlsiU2VxdWVsaXplIiwicmVxdWlyZSIsImJjcnlwdFNlcnZpY2UiLCJzZXF1ZWxpemUiLCJob29rcyIsImJlZm9yZUNyZWF0ZSIsInVzZXIiLCJwYXNzd29yZCIsInRhYmxlTmFtZSIsIlVzZXIiLCJkZWZpbmUiLCJlbWFpbCIsInR5cGUiLCJTVFJJTkciLCJ1bmlxdWUiLCJmaXJzdG5hbWUiLCJtaWRkbGVuYW1lIiwibGFzdG5hbWUiLCJhZ2UiLCJJTlQiLCJnZW5kZXIiLCJ1c2VyX3R5cGUiLCJwcm90b3R5cGUiLCJ0b0pTT04iLCJ2YWx1ZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLDRCQUFELENBQTdCOztBQUVBLE1BQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLHVCQUFELENBQXpCOztBQUVBLE1BQU1HLEtBQUssR0FBRztBQUNaQyxFQUFBQSxZQUFZLENBQUNDLElBQUQsRUFBTztBQUNqQkEsSUFBQUEsSUFBSSxDQUFDQyxRQUFMLEdBQWdCTCxhQUFhLEdBQUdLLFFBQWhCLENBQXlCRCxJQUF6QixDQUFoQixDQURpQixDQUMrQjtBQUNqRDs7QUFIVyxDQUFkO0FBUUEsTUFBTUUsU0FBUyxHQUFHLE9BQWxCO0FBRUEsTUFBTUMsSUFBSSxHQUFHTixTQUFTLENBQUNPLE1BQVYsQ0FBaUIsTUFBakIsRUFBeUI7QUFDcENDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxJQUFJLEVBQUVaLFNBQVMsQ0FBQ2EsTUFEWDtBQUVMQyxJQUFBQSxNQUFNLEVBQUU7QUFGSCxHQUQ2QjtBQUtwQ1AsRUFBQUEsUUFBUSxFQUFFO0FBQ1JLLElBQUFBLElBQUksRUFBRVosU0FBUyxDQUFDYTtBQURSLEdBTDBCO0FBUW5DRSxFQUFBQSxTQUFTLEVBQUU7QUFDVkgsSUFBQUEsSUFBSSxFQUFFWixTQUFTLENBQUNhO0FBRE4sR0FSd0I7QUFXbkNHLEVBQUFBLFVBQVUsRUFBRTtBQUNYSixJQUFBQSxJQUFJLEVBQUVaLFNBQVMsQ0FBQ2E7QUFETCxHQVh1QjtBQWNuQ0ksRUFBQUEsUUFBUSxFQUFFO0FBQ1RMLElBQUFBLElBQUksRUFBRVosU0FBUyxDQUFDYTtBQURQLEdBZHlCO0FBaUJuQ0ssRUFBQUEsR0FBRyxFQUFFO0FBQ0pOLElBQUFBLElBQUksRUFBRVosU0FBUyxDQUFDbUI7QUFEWixHQWpCOEI7QUFvQmxDQyxFQUFBQSxNQUFNLEVBQUU7QUFDUlIsSUFBQUEsSUFBSSxFQUFFWixTQUFTLENBQUNhO0FBRFIsR0FwQjBCO0FBdUJsQ1EsRUFBQUEsU0FBUyxFQUFFO0FBQ1hULElBQUFBLElBQUksRUFBRVosU0FBUyxDQUFDYTtBQURMO0FBdkJ1QixDQUF6QixFQTJCVjtBQUFFVCxFQUFBQSxLQUFGO0FBQVNJLEVBQUFBO0FBQVQsQ0EzQlUsQ0FBYixDLENBNkJBOztBQUNBQyxJQUFJLENBQUNhLFNBQUwsQ0FBZUMsTUFBZixHQUF3QixZQUFZO0FBQ2xDLFFBQU1DLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLQyxHQUFMLEVBQWxCLENBQWY7QUFFQSxTQUFPSCxNQUFNLENBQUNqQixRQUFkO0FBRUEsU0FBT2lCLE1BQVA7QUFDRCxDQU5EOztBQU9BSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixJQUFqQiIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXFJ1c3NlbCBEYXZlIEJheWFuYWRvXFxEZXNrdG9wXFxBUElcXHRpbWVrZWVwaW5nLWFwaVxcYXBpXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZXF1ZWxpemUgPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcclxuY29uc3QgYmNyeXB0U2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2JjcnlwdC5zZXJ2aWNlJyk7XHJcblxyXG5jb25zdCBzZXF1ZWxpemUgPSByZXF1aXJlKCcuLi8uLi9jb25maWcvZGF0YWJhc2UnKTtcclxuXHJcbmNvbnN0IGhvb2tzID0ge1xyXG4gIGJlZm9yZUNyZWF0ZSh1c2VyKSB7XHJcbiAgICB1c2VyLnBhc3N3b3JkID0gYmNyeXB0U2VydmljZSgpLnBhc3N3b3JkKHVzZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXHJcbiAgfSxcclxufTtcclxuXHJcblxyXG5cclxuY29uc3QgdGFibGVOYW1lID0gJ3VzZXJzJztcclxuXHJcbmNvbnN0IFVzZXIgPSBzZXF1ZWxpemUuZGVmaW5lKCdVc2VyJywge1xyXG4gIGVtYWlsOiB7XHJcbiAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HLFxyXG4gICAgdW5pcXVlOiB0cnVlLFxyXG4gIH0sXHJcbiAgcGFzc3dvcmQ6IHtcclxuICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXHJcbiAgfSxcclxuICAgZmlyc3RuYW1lOiB7XHJcbiAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HLFxyXG4gIH0sXHJcbiAgIG1pZGRsZW5hbWU6IHtcclxuICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXHJcbiAgfSxcclxuICAgbGFzdG5hbWU6IHtcclxuICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXHJcbiAgfSxcclxuICAgYWdlOiB7XHJcbiAgICB0eXBlOiBTZXF1ZWxpemUuSU5ULFxyXG4gIH0sXHJcbiAgICBnZW5kZXI6IHtcclxuICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXHJcbiAgfSxcclxuICAgIHVzZXJfdHlwZToge1xyXG4gICAgdHlwZTogU2VxdWVsaXplLlNUUklORyxcclxuICB9LFxyXG5cclxufSwgeyBob29rcywgdGFibGVOYW1lIH0pO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcblVzZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdldCgpKTtcclxuXHJcbiAgZGVsZXRlIHZhbHVlcy5wYXNzd29yZDtcclxuXHJcbiAgcmV0dXJuIHZhbHVlcztcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSBVc2VyOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "User.js"
      ],
      "names": [
        "Sequelize",
        "require",
        "bcryptService",
        "sequelize",
        "hooks",
        "beforeCreate",
        "user",
        "password",
        "tableName",
        "User",
        "define",
        "email",
        "type",
        "STRING",
        "unique",
        "firstname",
        "middlename",
        "lastname",
        "age",
        "INT",
        "gender",
        "user_type",
        "prototype",
        "toJSON",
        "values",
        "Object",
        "assign",
        "get",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,4BAAD,CAA7B;;AAEA,MAAME,SAAS,GAAGF,OAAO,CAAC,uBAAD,CAAzB;;AAEA,MAAMG,KAAK,GAAG;AACZC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjBA,IAAAA,IAAI,CAACC,QAAL,GAAgBL,aAAa,GAAGK,QAAhB,CAAyBD,IAAzB,CAAhB,CADiB,CAC+B;AACjD;;AAHW,CAAd;AAQA,MAAME,SAAS,GAAG,OAAlB;AAEA,MAAMC,IAAI,GAAGN,SAAS,CAACO,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEZ,SAAS,CAACa,MADX;AAELC,IAAAA,MAAM,EAAE;AAFH,GAD6B;AAKpCP,EAAAA,QAAQ,EAAE;AACRK,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADR,GAL0B;AAQnCE,EAAAA,SAAS,EAAE;AACVH,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADN,GARwB;AAWnCG,EAAAA,UAAU,EAAE;AACXJ,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADL,GAXuB;AAcnCI,EAAAA,QAAQ,EAAE;AACTL,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADP,GAdyB;AAiBnCK,EAAAA,GAAG,EAAE;AACJN,IAAAA,IAAI,EAAEZ,SAAS,CAACmB;AADZ,GAjB8B;AAoBlCC,EAAAA,MAAM,EAAE;AACRR,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADR,GApB0B;AAuBlCQ,EAAAA,SAAS,EAAE;AACXT,IAAAA,IAAI,EAAEZ,SAAS,CAACa;AADL;AAvBuB,CAAzB,EA2BV;AAAET,EAAAA,KAAF;AAASI,EAAAA;AAAT,CA3BU,CAAb,C,CA6BA;;AACAC,IAAI,CAACa,SAAL,CAAeC,MAAf,GAAwB,YAAY;AAClC,QAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,GAAL,EAAlB,CAAf;AAEA,SAAOH,MAAM,CAACjB,QAAd;AAEA,SAAOiB,MAAP;AACD,CAND;;AAOAI,MAAM,CAACC,OAAP,GAAiBpB,IAAjB",
      "sourceRoot": "C:\\Users\\Russel Dave Bayanado\\Desktop\\API\\timekeeping-api\\api\\models",
      "sourcesContent": [
        "const Sequelize = require('sequelize');\r\nconst bcryptService = require('../services/bcrypt.service');\r\n\r\nconst sequelize = require('../../config/database');\r\n\r\nconst hooks = {\r\n  beforeCreate(user) {\r\n    user.password = bcryptService().password(user); // eslint-disable-line no-param-reassign\r\n  },\r\n};\r\n\r\n\r\n\r\nconst tableName = 'users';\r\n\r\nconst User = sequelize.define('User', {\r\n  email: {\r\n    type: Sequelize.STRING,\r\n    unique: true,\r\n  },\r\n  password: {\r\n    type: Sequelize.STRING,\r\n  },\r\n   firstname: {\r\n    type: Sequelize.STRING,\r\n  },\r\n   middlename: {\r\n    type: Sequelize.STRING,\r\n  },\r\n   lastname: {\r\n    type: Sequelize.STRING,\r\n  },\r\n   age: {\r\n    type: Sequelize.INT,\r\n  },\r\n    gender: {\r\n    type: Sequelize.STRING,\r\n  },\r\n    user_type: {\r\n    type: Sequelize.STRING,\r\n  },\r\n\r\n}, { hooks, tableName });\r\n\r\n// eslint-disable-next-line\r\nUser.prototype.toJSON = function () {\r\n  const values = Object.assign({}, this.get());\r\n\r\n  delete values.password;\r\n\r\n  return values;\r\n};\r\nmodule.exports = User;"
      ]
    },
    "sourceType": "module",
    "mtime": 1548826721988
  }
}